local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Player = Players.LocalPlayer
local Backpack = Player.Backpack

local GameEvent: RemoteEvent = ReplicatedStorage:WaitForChild("Event")

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/lolz59/library/refs/heads/main/ice.lua"))()

local Menu = library.new("Trench war UI")

local Main = Menu:CreateSection("Main")

local states = {
	HitboxEnabled = false,
	HitboxSize = 2,
	Nametags = false,
	Highlight = false,
	Multiplier = 1,
}

Main:CreateSlider("Damage mutliplier", 100, function(value)
	states.Multiplier = math.max(value, 1)
end)

Main:CreateButton("Get sniper", function()
	local Character = Player.Character

	if Character and Character.PrimaryPart then
		GameEvent:FireServer(GameEvent, "Spawn", Character.PrimaryPart.Position)
		task.wait(1)
	end
end)

Main:CreateButton("Goto", function()
	local Character = Player.Character

	local Nearest = nil
	local MaxDistance = 10000
	
	for i, Target in ipairs(Players:GetPlayers()) do
		if Target ~= Player and Target.Character and Target.Character.PrimaryPart then
			local Distance = (Character.PrimaryPart.Position - Target.Character.PrimaryPart.Position).Magnitude
			
			if Distance < MaxDistance then
				Nearest = Target.Character.PrimaryPart
				MaxDistance = Distance
			end
		end
	end
	
	if not Nearest then return end
	Character:PivotTo(Nearest.CFrame)
end)

--

local Hitbox = Menu:CreateSection("Hitbox")

Hitbox:CreateToggle("Hitbox enabled", function(enabled)
	states.HitboxEnabled = enabled
end)

Hitbox:CreateSlider("Hitbox size", 100, function(value)
	states.HitboxSize = 1 + value
end)

--

local ESP = Menu:CreateSection("ESP")

ESP:CreateToggle("Nametags enabled", function(enabled)
	states.Nametags = enabled
end)

ESP:CreateToggle("Highlight enabled", function(enabled)
	states.Highlight = enabled
end)

local CurrentlyViewing

ESP:CreateTextBox("Username", "View", function(input: string)
	local inputLower = input:lower()
	local matchedPlayer = nil

	-- Search for the first player whose name starts with the input
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= Player and player.Name:lower():sub(1, #inputLower) == inputLower then
			matchedPlayer = player
			break
		end
	end

	if matchedPlayer then
		CurrentlyViewing = matchedPlayer
		print("Now spectating:", matchedPlayer.Name)

		local char = matchedPlayer.Character
		if char then
			local hrp = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Head")
			if hrp then
				workspace.CurrentCamera.CameraSubject = hrp
			end
		end
	else
		print("No player found starting with:", input)
	end
end)

ESP:CreateButton("Stop viewing", function()
	CurrentlyViewing = nil
	workspace.CurrentCamera.CameraSubject = Player.Character and Player.Character:FindFirstChild("Humanoid")
		or workspace.CurrentCamera
end)

--

local espCache = {}

RunService.RenderStepped:Connect(function()
	for _, enemy in ipairs(Players:GetPlayers()) do
		if enemy ~= Player and Player.Team ~= enemy.Team then
			local character = enemy.Character
			if character then
				local hrp = character:FindFirstChild("HumanoidRootPart")
				if hrp then
					hrp.CanCollide = false

					if states.HitboxEnabled then
						hrp.Size = Vector3.one * states.HitboxSize
						hrp.Transparency = 0.5
					else
						hrp.Size = Vector3.one * 2
						hrp.Transparency = 1
					end
				end
				
				if not espCache[enemy] then
					espCache[enemy] = {
						billboard = nil,
						highlight = nil,
					}
				end

				local cache = espCache[enemy]

				-- Nametag (BillboardGui)
				if states.Nametags and hrp then
					if not cache.billboard then
						print("Check")
						local bb = Instance.new("BillboardGui")
						bb.Adornee = hrp
						bb.AlwaysOnTop = true
						bb.Size = UDim2.new(0, 100, 0, 20)
						bb.StudsOffset = Vector3.new(0, 2, 0)

						local label = Instance.new("TextLabel", bb)
						label.Size = UDim2.new(1, 0, 1, 0)
						label.BackgroundTransparency = 1
						label.Text = enemy.Name
						label.TextColor3 = Color3.new(1, 0, 0)
						label.TextScaled = true
						label.Font = Enum.Font.SourceSansBold

						bb.Parent = hrp
						cache.billboard = bb
					end
				elseif cache.billboard then
					print("2")
					cache.billboard:Destroy()
					cache.billboard = nil
				end

				-- Highlight
				if states.Highlight then
					if not cache.highlight then
						print("a")
						local hl = Instance.new("Highlight")
						hl.Name = "EnemyHighlight"
						hl.FillTransparency = 1
						hl.OutlineColor = Color3.new(1, 0, 0)
						hl.Adornee = character
						hl.Parent = character
						cache.highlight = hl
					end
				elseif cache.highlight then
					print("b")
					cache.highlight:Destroy()
					cache.highlight = nil
				end
			end
		elseif espCache[enemy] then
			-- Clean up ESP for non-enemies
			local cache = espCache[enemy]
			if cache.billboard then cache.billboard:Destroy() end
			if cache.highlight then cache.highlight:Destroy() end
			espCache[enemy] = nil
		end
	end
end)

--

local MT = getrawmetatable(game)
local Old = MT.__namecall
setreadonly(MT, false)

MT.__namecall = newcclosure(function(Remote, ...) 
	local Args = {...}
	local Method = getnamecallmethod()

	if Remote.Name == "RemoteEvent" and Method == "FireServer" then
		if Args[2] ~= nil and typeof(Args[2]) == "number" then
			local Multiplier = tonumber(states.Multiplier)

			if Multiplier ~= nil then
				Args[2] = (Args[2] * Multiplier)

				Remote[Method](Remote, unpack(Args))
			end
		end
	end

	return Old(Remote, ...)
end)
setreadonly(MT, true)
--]]
